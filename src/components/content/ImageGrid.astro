---
import { GenImage } from "@data/genImage";
import { genImagePath } from "@utils/utils";
import SpanImage from "./SpanImage.astro";

export interface Props {
  xDim?: number;
  mobileXDim?: number;
  images: (GenImage | string)[];
  titles?: string[] | ((image: GenImage) => string);
}
let { images, xDim, mobileXDim, titles, autoPromptTitles } = Astro.props;

// should be the number of input images, if not specified. However never larger than 6.

const clamp = (x: number, min: number, max: number) =>
  Math.min(Math.max(min, x), max);
let xDimDetermined = clamp(xDim || images.length, 1, 6);
// default behavior: mobile at most 2
let xDimDeterminedMobile = clamp(
  mobileXDim || { 1: 1, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2 }[xDimDetermined]!,
  1,
  6
);

let gridColsMobile: string = {
  1: "grid-cols-1",
  2: "grid-cols-2",
  3: "grid-cols-3",
  4: "grid-cols-4",
  5: "grid-cols-5",
  6: "grid-cols-6",
}[xDimDeterminedMobile]!;
let gridCols: string = {
  1: "md:grid-cols-1",
  2: "md:grid-cols-2",
  3: "md:grid-cols-3",
  4: "md:grid-cols-4",
  5: "md:grid-cols-5",
  6: "md:grid-cols-6",
}[xDimDetermined]!;
---

<div class={`grid ${gridColsMobile} ${gridCols} gap-1`}>
  {
    images.map((image, i) => (
      <SpanImage
        image={image}
        details={xDimDetermined < 3}
        title={
          (titles &&
            (typeof titles === "object"
              ? titles[i]
              : typeof image !== "string"
              ? titles(image)
              : undefined)) ||
          (typeof image !== "string" && autoPromptTitles && image.prompt) ||
          undefined
        }
      />
    ))
  }
</div>
